// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: facial_recognition_message.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_facial_5frecognition_5fmessage_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_facial_5frecognition_5fmessage_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3008000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3008000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_facial_5frecognition_5fmessage_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_facial_5frecognition_5fmessage_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[7]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_facial_5frecognition_5fmessage_2eproto;
namespace ascend {
namespace presenter {
namespace facial_recognition {
class Box;
class BoxDefaultTypeInternal;
extern BoxDefaultTypeInternal _Box_default_instance_;
class CommonResponse;
class CommonResponseDefaultTypeInternal;
extern CommonResponseDefaultTypeInternal _CommonResponse_default_instance_;
class FaceFeature;
class FaceFeatureDefaultTypeInternal;
extern FaceFeatureDefaultTypeInternal _FaceFeature_default_instance_;
class FaceInfo;
class FaceInfoDefaultTypeInternal;
extern FaceInfoDefaultTypeInternal _FaceInfo_default_instance_;
class FaceResult;
class FaceResultDefaultTypeInternal;
extern FaceResultDefaultTypeInternal _FaceResult_default_instance_;
class FrameInfo;
class FrameInfoDefaultTypeInternal;
extern FrameInfoDefaultTypeInternal _FrameInfo_default_instance_;
class RegisterApp;
class RegisterAppDefaultTypeInternal;
extern RegisterAppDefaultTypeInternal _RegisterApp_default_instance_;
}  // namespace facial_recognition
}  // namespace presenter
}  // namespace ascend
PROTOBUF_NAMESPACE_OPEN
template<> ::ascend::presenter::facial_recognition::Box* Arena::CreateMaybeMessage<::ascend::presenter::facial_recognition::Box>(Arena*);
template<> ::ascend::presenter::facial_recognition::CommonResponse* Arena::CreateMaybeMessage<::ascend::presenter::facial_recognition::CommonResponse>(Arena*);
template<> ::ascend::presenter::facial_recognition::FaceFeature* Arena::CreateMaybeMessage<::ascend::presenter::facial_recognition::FaceFeature>(Arena*);
template<> ::ascend::presenter::facial_recognition::FaceInfo* Arena::CreateMaybeMessage<::ascend::presenter::facial_recognition::FaceInfo>(Arena*);
template<> ::ascend::presenter::facial_recognition::FaceResult* Arena::CreateMaybeMessage<::ascend::presenter::facial_recognition::FaceResult>(Arena*);
template<> ::ascend::presenter::facial_recognition::FrameInfo* Arena::CreateMaybeMessage<::ascend::presenter::facial_recognition::FrameInfo>(Arena*);
template<> ::ascend::presenter::facial_recognition::RegisterApp* Arena::CreateMaybeMessage<::ascend::presenter::facial_recognition::RegisterApp>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace ascend {
namespace presenter {
namespace facial_recognition {

enum ErrorCode : int {
  kErrorNone = 0,
  kErrorAppRegisterExist = 1,
  kErrorAppRegisterType = 2,
  kErrorAppRegisterLimit = 3,
  kErrorOther = 5,
  ErrorCode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ErrorCode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ErrorCode_IsValid(int value);
constexpr ErrorCode ErrorCode_MIN = kErrorNone;
constexpr ErrorCode ErrorCode_MAX = kErrorOther;
constexpr int ErrorCode_ARRAYSIZE = ErrorCode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ErrorCode_descriptor();
template<typename T>
inline const std::string& ErrorCode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ErrorCode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ErrorCode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ErrorCode_descriptor(), enum_t_value);
}
inline bool ErrorCode_Parse(
    const std::string& name, ErrorCode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ErrorCode>(
    ErrorCode_descriptor(), name, value);
}
// ===================================================================

class CommonResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ascend.presenter.facial_recognition.CommonResponse) */ {
 public:
  CommonResponse();
  virtual ~CommonResponse();

  CommonResponse(const CommonResponse& from);
  CommonResponse(CommonResponse&& from) noexcept
    : CommonResponse() {
    *this = ::std::move(from);
  }

  inline CommonResponse& operator=(const CommonResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommonResponse& operator=(CommonResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CommonResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CommonResponse* internal_default_instance() {
    return reinterpret_cast<const CommonResponse*>(
               &_CommonResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(CommonResponse* other);
  friend void swap(CommonResponse& a, CommonResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CommonResponse* New() const final {
    return CreateMaybeMessage<CommonResponse>(nullptr);
  }

  CommonResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CommonResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CommonResponse& from);
  void MergeFrom(const CommonResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommonResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ascend.presenter.facial_recognition.CommonResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_facial_5frecognition_5fmessage_2eproto);
    return ::descriptor_table_facial_5frecognition_5fmessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string message = 2;
  void clear_message();
  static const int kMessageFieldNumber = 2;
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);

  // .ascend.presenter.facial_recognition.ErrorCode ret = 1;
  void clear_ret();
  static const int kRetFieldNumber = 1;
  ::ascend::presenter::facial_recognition::ErrorCode ret() const;
  void set_ret(::ascend::presenter::facial_recognition::ErrorCode value);

  // @@protoc_insertion_point(class_scope:ascend.presenter.facial_recognition.CommonResponse)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  int ret_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_facial_5frecognition_5fmessage_2eproto;
};
// -------------------------------------------------------------------

class RegisterApp :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ascend.presenter.facial_recognition.RegisterApp) */ {
 public:
  RegisterApp();
  virtual ~RegisterApp();

  RegisterApp(const RegisterApp& from);
  RegisterApp(RegisterApp&& from) noexcept
    : RegisterApp() {
    *this = ::std::move(from);
  }

  inline RegisterApp& operator=(const RegisterApp& from) {
    CopyFrom(from);
    return *this;
  }
  inline RegisterApp& operator=(RegisterApp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RegisterApp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RegisterApp* internal_default_instance() {
    return reinterpret_cast<const RegisterApp*>(
               &_RegisterApp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(RegisterApp* other);
  friend void swap(RegisterApp& a, RegisterApp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RegisterApp* New() const final {
    return CreateMaybeMessage<RegisterApp>(nullptr);
  }

  RegisterApp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RegisterApp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RegisterApp& from);
  void MergeFrom(const RegisterApp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RegisterApp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ascend.presenter.facial_recognition.RegisterApp";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_facial_5frecognition_5fmessage_2eproto);
    return ::descriptor_table_facial_5frecognition_5fmessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);

  // string type = 2;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  const std::string& type() const;
  void set_type(const std::string& value);
  void set_type(std::string&& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  std::string* mutable_type();
  std::string* release_type();
  void set_allocated_type(std::string* type);

  // @@protoc_insertion_point(class_scope:ascend.presenter.facial_recognition.RegisterApp)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_facial_5frecognition_5fmessage_2eproto;
};
// -------------------------------------------------------------------

class Box :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ascend.presenter.facial_recognition.Box) */ {
 public:
  Box();
  virtual ~Box();

  Box(const Box& from);
  Box(Box&& from) noexcept
    : Box() {
    *this = ::std::move(from);
  }

  inline Box& operator=(const Box& from) {
    CopyFrom(from);
    return *this;
  }
  inline Box& operator=(Box&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Box& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Box* internal_default_instance() {
    return reinterpret_cast<const Box*>(
               &_Box_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(Box* other);
  friend void swap(Box& a, Box& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Box* New() const final {
    return CreateMaybeMessage<Box>(nullptr);
  }

  Box* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Box>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Box& from);
  void MergeFrom(const Box& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Box* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ascend.presenter.facial_recognition.Box";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_facial_5frecognition_5fmessage_2eproto);
    return ::descriptor_table_facial_5frecognition_5fmessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 lt_x = 1;
  void clear_lt_x();
  static const int kLtXFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::uint32 lt_x() const;
  void set_lt_x(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint32 lt_y = 2;
  void clear_lt_y();
  static const int kLtYFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::uint32 lt_y() const;
  void set_lt_y(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint32 rb_x = 3;
  void clear_rb_x();
  static const int kRbXFieldNumber = 3;
  ::PROTOBUF_NAMESPACE_ID::uint32 rb_x() const;
  void set_rb_x(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint32 rb_y = 4;
  void clear_rb_y();
  static const int kRbYFieldNumber = 4;
  ::PROTOBUF_NAMESPACE_ID::uint32 rb_y() const;
  void set_rb_y(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:ascend.presenter.facial_recognition.Box)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 lt_x_;
  ::PROTOBUF_NAMESPACE_ID::uint32 lt_y_;
  ::PROTOBUF_NAMESPACE_ID::uint32 rb_x_;
  ::PROTOBUF_NAMESPACE_ID::uint32 rb_y_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_facial_5frecognition_5fmessage_2eproto;
};
// -------------------------------------------------------------------

class FaceFeature :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ascend.presenter.facial_recognition.FaceFeature) */ {
 public:
  FaceFeature();
  virtual ~FaceFeature();

  FaceFeature(const FaceFeature& from);
  FaceFeature(FaceFeature&& from) noexcept
    : FaceFeature() {
    *this = ::std::move(from);
  }

  inline FaceFeature& operator=(const FaceFeature& from) {
    CopyFrom(from);
    return *this;
  }
  inline FaceFeature& operator=(FaceFeature&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FaceFeature& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FaceFeature* internal_default_instance() {
    return reinterpret_cast<const FaceFeature*>(
               &_FaceFeature_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(FaceFeature* other);
  friend void swap(FaceFeature& a, FaceFeature& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FaceFeature* New() const final {
    return CreateMaybeMessage<FaceFeature>(nullptr);
  }

  FaceFeature* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FaceFeature>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FaceFeature& from);
  void MergeFrom(const FaceFeature& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FaceFeature* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ascend.presenter.facial_recognition.FaceFeature";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_facial_5frecognition_5fmessage_2eproto);
    return ::descriptor_table_facial_5frecognition_5fmessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated float vector = 2;
  int vector_size() const;
  void clear_vector();
  static const int kVectorFieldNumber = 2;
  float vector(int index) const;
  void set_vector(int index, float value);
  void add_vector(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      vector() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_vector();

  // .ascend.presenter.facial_recognition.Box box = 1;
  bool has_box() const;
  void clear_box();
  static const int kBoxFieldNumber = 1;
  const ::ascend::presenter::facial_recognition::Box& box() const;
  ::ascend::presenter::facial_recognition::Box* release_box();
  ::ascend::presenter::facial_recognition::Box* mutable_box();
  void set_allocated_box(::ascend::presenter::facial_recognition::Box* box);

  // @@protoc_insertion_point(class_scope:ascend.presenter.facial_recognition.FaceFeature)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > vector_;
  mutable std::atomic<int> _vector_cached_byte_size_;
  ::ascend::presenter::facial_recognition::Box* box_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_facial_5frecognition_5fmessage_2eproto;
};
// -------------------------------------------------------------------

class FaceInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ascend.presenter.facial_recognition.FaceInfo) */ {
 public:
  FaceInfo();
  virtual ~FaceInfo();

  FaceInfo(const FaceInfo& from);
  FaceInfo(FaceInfo&& from) noexcept
    : FaceInfo() {
    *this = ::std::move(from);
  }

  inline FaceInfo& operator=(const FaceInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline FaceInfo& operator=(FaceInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FaceInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FaceInfo* internal_default_instance() {
    return reinterpret_cast<const FaceInfo*>(
               &_FaceInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(FaceInfo* other);
  friend void swap(FaceInfo& a, FaceInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FaceInfo* New() const final {
    return CreateMaybeMessage<FaceInfo>(nullptr);
  }

  FaceInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FaceInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FaceInfo& from);
  void MergeFrom(const FaceInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FaceInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ascend.presenter.facial_recognition.FaceInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_facial_5frecognition_5fmessage_2eproto);
    return ::descriptor_table_facial_5frecognition_5fmessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);

  // bytes image = 2;
  void clear_image();
  static const int kImageFieldNumber = 2;
  const std::string& image() const;
  void set_image(const std::string& value);
  void set_image(std::string&& value);
  void set_image(const char* value);
  void set_image(const void* value, size_t size);
  std::string* mutable_image();
  std::string* release_image();
  void set_allocated_image(std::string* image);

  // @@protoc_insertion_point(class_scope:ascend.presenter.facial_recognition.FaceInfo)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr image_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_facial_5frecognition_5fmessage_2eproto;
};
// -------------------------------------------------------------------

class FaceResult :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ascend.presenter.facial_recognition.FaceResult) */ {
 public:
  FaceResult();
  virtual ~FaceResult();

  FaceResult(const FaceResult& from);
  FaceResult(FaceResult&& from) noexcept
    : FaceResult() {
    *this = ::std::move(from);
  }

  inline FaceResult& operator=(const FaceResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline FaceResult& operator=(FaceResult&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FaceResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FaceResult* internal_default_instance() {
    return reinterpret_cast<const FaceResult*>(
               &_FaceResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(FaceResult* other);
  friend void swap(FaceResult& a, FaceResult& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FaceResult* New() const final {
    return CreateMaybeMessage<FaceResult>(nullptr);
  }

  FaceResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FaceResult>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FaceResult& from);
  void MergeFrom(const FaceResult& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FaceResult* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ascend.presenter.facial_recognition.FaceResult";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_facial_5frecognition_5fmessage_2eproto);
    return ::descriptor_table_facial_5frecognition_5fmessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ascend.presenter.facial_recognition.FaceFeature feature = 3;
  int feature_size() const;
  void clear_feature();
  static const int kFeatureFieldNumber = 3;
  ::ascend::presenter::facial_recognition::FaceFeature* mutable_feature(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ascend::presenter::facial_recognition::FaceFeature >*
      mutable_feature();
  const ::ascend::presenter::facial_recognition::FaceFeature& feature(int index) const;
  ::ascend::presenter::facial_recognition::FaceFeature* add_feature();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ascend::presenter::facial_recognition::FaceFeature >&
      feature() const;

  // string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);

  // .ascend.presenter.facial_recognition.CommonResponse response = 2;
  bool has_response() const;
  void clear_response();
  static const int kResponseFieldNumber = 2;
  const ::ascend::presenter::facial_recognition::CommonResponse& response() const;
  ::ascend::presenter::facial_recognition::CommonResponse* release_response();
  ::ascend::presenter::facial_recognition::CommonResponse* mutable_response();
  void set_allocated_response(::ascend::presenter::facial_recognition::CommonResponse* response);

  // @@protoc_insertion_point(class_scope:ascend.presenter.facial_recognition.FaceResult)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ascend::presenter::facial_recognition::FaceFeature > feature_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::ascend::presenter::facial_recognition::CommonResponse* response_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_facial_5frecognition_5fmessage_2eproto;
};
// -------------------------------------------------------------------

class FrameInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ascend.presenter.facial_recognition.FrameInfo) */ {
 public:
  FrameInfo();
  virtual ~FrameInfo();

  FrameInfo(const FrameInfo& from);
  FrameInfo(FrameInfo&& from) noexcept
    : FrameInfo() {
    *this = ::std::move(from);
  }

  inline FrameInfo& operator=(const FrameInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline FrameInfo& operator=(FrameInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FrameInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FrameInfo* internal_default_instance() {
    return reinterpret_cast<const FrameInfo*>(
               &_FrameInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(FrameInfo* other);
  friend void swap(FrameInfo& a, FrameInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FrameInfo* New() const final {
    return CreateMaybeMessage<FrameInfo>(nullptr);
  }

  FrameInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FrameInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FrameInfo& from);
  void MergeFrom(const FrameInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FrameInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ascend.presenter.facial_recognition.FrameInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_facial_5frecognition_5fmessage_2eproto);
    return ::descriptor_table_facial_5frecognition_5fmessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ascend.presenter.facial_recognition.FaceFeature feature = 2;
  int feature_size() const;
  void clear_feature();
  static const int kFeatureFieldNumber = 2;
  ::ascend::presenter::facial_recognition::FaceFeature* mutable_feature(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ascend::presenter::facial_recognition::FaceFeature >*
      mutable_feature();
  const ::ascend::presenter::facial_recognition::FaceFeature& feature(int index) const;
  ::ascend::presenter::facial_recognition::FaceFeature* add_feature();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ascend::presenter::facial_recognition::FaceFeature >&
      feature() const;

  // bytes image = 1;
  void clear_image();
  static const int kImageFieldNumber = 1;
  const std::string& image() const;
  void set_image(const std::string& value);
  void set_image(std::string&& value);
  void set_image(const char* value);
  void set_image(const void* value, size_t size);
  std::string* mutable_image();
  std::string* release_image();
  void set_allocated_image(std::string* image);

  // @@protoc_insertion_point(class_scope:ascend.presenter.facial_recognition.FrameInfo)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ascend::presenter::facial_recognition::FaceFeature > feature_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr image_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_facial_5frecognition_5fmessage_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CommonResponse

// .ascend.presenter.facial_recognition.ErrorCode ret = 1;
inline void CommonResponse::clear_ret() {
  ret_ = 0;
}
inline ::ascend::presenter::facial_recognition::ErrorCode CommonResponse::ret() const {
  // @@protoc_insertion_point(field_get:ascend.presenter.facial_recognition.CommonResponse.ret)
  return static_cast< ::ascend::presenter::facial_recognition::ErrorCode >(ret_);
}
inline void CommonResponse::set_ret(::ascend::presenter::facial_recognition::ErrorCode value) {
  
  ret_ = value;
  // @@protoc_insertion_point(field_set:ascend.presenter.facial_recognition.CommonResponse.ret)
}

// string message = 2;
inline void CommonResponse::clear_message() {
  message_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CommonResponse::message() const {
  // @@protoc_insertion_point(field_get:ascend.presenter.facial_recognition.CommonResponse.message)
  return message_.GetNoArena();
}
inline void CommonResponse::set_message(const std::string& value) {
  
  message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ascend.presenter.facial_recognition.CommonResponse.message)
}
inline void CommonResponse::set_message(std::string&& value) {
  
  message_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ascend.presenter.facial_recognition.CommonResponse.message)
}
inline void CommonResponse::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ascend.presenter.facial_recognition.CommonResponse.message)
}
inline void CommonResponse::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ascend.presenter.facial_recognition.CommonResponse.message)
}
inline std::string* CommonResponse::mutable_message() {
  
  // @@protoc_insertion_point(field_mutable:ascend.presenter.facial_recognition.CommonResponse.message)
  return message_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CommonResponse::release_message() {
  // @@protoc_insertion_point(field_release:ascend.presenter.facial_recognition.CommonResponse.message)
  
  return message_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CommonResponse::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:ascend.presenter.facial_recognition.CommonResponse.message)
}

// -------------------------------------------------------------------

// RegisterApp

// string id = 1;
inline void RegisterApp::clear_id() {
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RegisterApp::id() const {
  // @@protoc_insertion_point(field_get:ascend.presenter.facial_recognition.RegisterApp.id)
  return id_.GetNoArena();
}
inline void RegisterApp::set_id(const std::string& value) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ascend.presenter.facial_recognition.RegisterApp.id)
}
inline void RegisterApp::set_id(std::string&& value) {
  
  id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ascend.presenter.facial_recognition.RegisterApp.id)
}
inline void RegisterApp::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ascend.presenter.facial_recognition.RegisterApp.id)
}
inline void RegisterApp::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ascend.presenter.facial_recognition.RegisterApp.id)
}
inline std::string* RegisterApp::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:ascend.presenter.facial_recognition.RegisterApp.id)
  return id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RegisterApp::release_id() {
  // @@protoc_insertion_point(field_release:ascend.presenter.facial_recognition.RegisterApp.id)
  
  return id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RegisterApp::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:ascend.presenter.facial_recognition.RegisterApp.id)
}

// string type = 2;
inline void RegisterApp::clear_type() {
  type_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RegisterApp::type() const {
  // @@protoc_insertion_point(field_get:ascend.presenter.facial_recognition.RegisterApp.type)
  return type_.GetNoArena();
}
inline void RegisterApp::set_type(const std::string& value) {
  
  type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ascend.presenter.facial_recognition.RegisterApp.type)
}
inline void RegisterApp::set_type(std::string&& value) {
  
  type_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ascend.presenter.facial_recognition.RegisterApp.type)
}
inline void RegisterApp::set_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ascend.presenter.facial_recognition.RegisterApp.type)
}
inline void RegisterApp::set_type(const char* value, size_t size) {
  
  type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ascend.presenter.facial_recognition.RegisterApp.type)
}
inline std::string* RegisterApp::mutable_type() {
  
  // @@protoc_insertion_point(field_mutable:ascend.presenter.facial_recognition.RegisterApp.type)
  return type_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RegisterApp::release_type() {
  // @@protoc_insertion_point(field_release:ascend.presenter.facial_recognition.RegisterApp.type)
  
  return type_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RegisterApp::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  type_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:ascend.presenter.facial_recognition.RegisterApp.type)
}

// -------------------------------------------------------------------

// Box

// uint32 lt_x = 1;
inline void Box::clear_lt_x() {
  lt_x_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Box::lt_x() const {
  // @@protoc_insertion_point(field_get:ascend.presenter.facial_recognition.Box.lt_x)
  return lt_x_;
}
inline void Box::set_lt_x(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  lt_x_ = value;
  // @@protoc_insertion_point(field_set:ascend.presenter.facial_recognition.Box.lt_x)
}

// uint32 lt_y = 2;
inline void Box::clear_lt_y() {
  lt_y_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Box::lt_y() const {
  // @@protoc_insertion_point(field_get:ascend.presenter.facial_recognition.Box.lt_y)
  return lt_y_;
}
inline void Box::set_lt_y(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  lt_y_ = value;
  // @@protoc_insertion_point(field_set:ascend.presenter.facial_recognition.Box.lt_y)
}

// uint32 rb_x = 3;
inline void Box::clear_rb_x() {
  rb_x_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Box::rb_x() const {
  // @@protoc_insertion_point(field_get:ascend.presenter.facial_recognition.Box.rb_x)
  return rb_x_;
}
inline void Box::set_rb_x(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  rb_x_ = value;
  // @@protoc_insertion_point(field_set:ascend.presenter.facial_recognition.Box.rb_x)
}

// uint32 rb_y = 4;
inline void Box::clear_rb_y() {
  rb_y_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Box::rb_y() const {
  // @@protoc_insertion_point(field_get:ascend.presenter.facial_recognition.Box.rb_y)
  return rb_y_;
}
inline void Box::set_rb_y(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  rb_y_ = value;
  // @@protoc_insertion_point(field_set:ascend.presenter.facial_recognition.Box.rb_y)
}

// -------------------------------------------------------------------

// FaceFeature

// .ascend.presenter.facial_recognition.Box box = 1;
inline bool FaceFeature::has_box() const {
  return this != internal_default_instance() && box_ != nullptr;
}
inline void FaceFeature::clear_box() {
  if (GetArenaNoVirtual() == nullptr && box_ != nullptr) {
    delete box_;
  }
  box_ = nullptr;
}
inline const ::ascend::presenter::facial_recognition::Box& FaceFeature::box() const {
  const ::ascend::presenter::facial_recognition::Box* p = box_;
  // @@protoc_insertion_point(field_get:ascend.presenter.facial_recognition.FaceFeature.box)
  return p != nullptr ? *p : *reinterpret_cast<const ::ascend::presenter::facial_recognition::Box*>(
      &::ascend::presenter::facial_recognition::_Box_default_instance_);
}
inline ::ascend::presenter::facial_recognition::Box* FaceFeature::release_box() {
  // @@protoc_insertion_point(field_release:ascend.presenter.facial_recognition.FaceFeature.box)
  
  ::ascend::presenter::facial_recognition::Box* temp = box_;
  box_ = nullptr;
  return temp;
}
inline ::ascend::presenter::facial_recognition::Box* FaceFeature::mutable_box() {
  
  if (box_ == nullptr) {
    auto* p = CreateMaybeMessage<::ascend::presenter::facial_recognition::Box>(GetArenaNoVirtual());
    box_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ascend.presenter.facial_recognition.FaceFeature.box)
  return box_;
}
inline void FaceFeature::set_allocated_box(::ascend::presenter::facial_recognition::Box* box) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete box_;
  }
  if (box) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      box = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, box, submessage_arena);
    }
    
  } else {
    
  }
  box_ = box;
  // @@protoc_insertion_point(field_set_allocated:ascend.presenter.facial_recognition.FaceFeature.box)
}

// repeated float vector = 2;
inline int FaceFeature::vector_size() const {
  return vector_.size();
}
inline void FaceFeature::clear_vector() {
  vector_.Clear();
}
inline float FaceFeature::vector(int index) const {
  // @@protoc_insertion_point(field_get:ascend.presenter.facial_recognition.FaceFeature.vector)
  return vector_.Get(index);
}
inline void FaceFeature::set_vector(int index, float value) {
  vector_.Set(index, value);
  // @@protoc_insertion_point(field_set:ascend.presenter.facial_recognition.FaceFeature.vector)
}
inline void FaceFeature::add_vector(float value) {
  vector_.Add(value);
  // @@protoc_insertion_point(field_add:ascend.presenter.facial_recognition.FaceFeature.vector)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
FaceFeature::vector() const {
  // @@protoc_insertion_point(field_list:ascend.presenter.facial_recognition.FaceFeature.vector)
  return vector_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
FaceFeature::mutable_vector() {
  // @@protoc_insertion_point(field_mutable_list:ascend.presenter.facial_recognition.FaceFeature.vector)
  return &vector_;
}

// -------------------------------------------------------------------

// FaceInfo

// string id = 1;
inline void FaceInfo::clear_id() {
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& FaceInfo::id() const {
  // @@protoc_insertion_point(field_get:ascend.presenter.facial_recognition.FaceInfo.id)
  return id_.GetNoArena();
}
inline void FaceInfo::set_id(const std::string& value) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ascend.presenter.facial_recognition.FaceInfo.id)
}
inline void FaceInfo::set_id(std::string&& value) {
  
  id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ascend.presenter.facial_recognition.FaceInfo.id)
}
inline void FaceInfo::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ascend.presenter.facial_recognition.FaceInfo.id)
}
inline void FaceInfo::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ascend.presenter.facial_recognition.FaceInfo.id)
}
inline std::string* FaceInfo::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:ascend.presenter.facial_recognition.FaceInfo.id)
  return id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* FaceInfo::release_id() {
  // @@protoc_insertion_point(field_release:ascend.presenter.facial_recognition.FaceInfo.id)
  
  return id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void FaceInfo::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:ascend.presenter.facial_recognition.FaceInfo.id)
}

// bytes image = 2;
inline void FaceInfo::clear_image() {
  image_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& FaceInfo::image() const {
  // @@protoc_insertion_point(field_get:ascend.presenter.facial_recognition.FaceInfo.image)
  return image_.GetNoArena();
}
inline void FaceInfo::set_image(const std::string& value) {
  
  image_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ascend.presenter.facial_recognition.FaceInfo.image)
}
inline void FaceInfo::set_image(std::string&& value) {
  
  image_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ascend.presenter.facial_recognition.FaceInfo.image)
}
inline void FaceInfo::set_image(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  image_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ascend.presenter.facial_recognition.FaceInfo.image)
}
inline void FaceInfo::set_image(const void* value, size_t size) {
  
  image_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ascend.presenter.facial_recognition.FaceInfo.image)
}
inline std::string* FaceInfo::mutable_image() {
  
  // @@protoc_insertion_point(field_mutable:ascend.presenter.facial_recognition.FaceInfo.image)
  return image_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* FaceInfo::release_image() {
  // @@protoc_insertion_point(field_release:ascend.presenter.facial_recognition.FaceInfo.image)
  
  return image_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void FaceInfo::set_allocated_image(std::string* image) {
  if (image != nullptr) {
    
  } else {
    
  }
  image_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), image);
  // @@protoc_insertion_point(field_set_allocated:ascend.presenter.facial_recognition.FaceInfo.image)
}

// -------------------------------------------------------------------

// FaceResult

// string id = 1;
inline void FaceResult::clear_id() {
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& FaceResult::id() const {
  // @@protoc_insertion_point(field_get:ascend.presenter.facial_recognition.FaceResult.id)
  return id_.GetNoArena();
}
inline void FaceResult::set_id(const std::string& value) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ascend.presenter.facial_recognition.FaceResult.id)
}
inline void FaceResult::set_id(std::string&& value) {
  
  id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ascend.presenter.facial_recognition.FaceResult.id)
}
inline void FaceResult::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ascend.presenter.facial_recognition.FaceResult.id)
}
inline void FaceResult::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ascend.presenter.facial_recognition.FaceResult.id)
}
inline std::string* FaceResult::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:ascend.presenter.facial_recognition.FaceResult.id)
  return id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* FaceResult::release_id() {
  // @@protoc_insertion_point(field_release:ascend.presenter.facial_recognition.FaceResult.id)
  
  return id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void FaceResult::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:ascend.presenter.facial_recognition.FaceResult.id)
}

// .ascend.presenter.facial_recognition.CommonResponse response = 2;
inline bool FaceResult::has_response() const {
  return this != internal_default_instance() && response_ != nullptr;
}
inline void FaceResult::clear_response() {
  if (GetArenaNoVirtual() == nullptr && response_ != nullptr) {
    delete response_;
  }
  response_ = nullptr;
}
inline const ::ascend::presenter::facial_recognition::CommonResponse& FaceResult::response() const {
  const ::ascend::presenter::facial_recognition::CommonResponse* p = response_;
  // @@protoc_insertion_point(field_get:ascend.presenter.facial_recognition.FaceResult.response)
  return p != nullptr ? *p : *reinterpret_cast<const ::ascend::presenter::facial_recognition::CommonResponse*>(
      &::ascend::presenter::facial_recognition::_CommonResponse_default_instance_);
}
inline ::ascend::presenter::facial_recognition::CommonResponse* FaceResult::release_response() {
  // @@protoc_insertion_point(field_release:ascend.presenter.facial_recognition.FaceResult.response)
  
  ::ascend::presenter::facial_recognition::CommonResponse* temp = response_;
  response_ = nullptr;
  return temp;
}
inline ::ascend::presenter::facial_recognition::CommonResponse* FaceResult::mutable_response() {
  
  if (response_ == nullptr) {
    auto* p = CreateMaybeMessage<::ascend::presenter::facial_recognition::CommonResponse>(GetArenaNoVirtual());
    response_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ascend.presenter.facial_recognition.FaceResult.response)
  return response_;
}
inline void FaceResult::set_allocated_response(::ascend::presenter::facial_recognition::CommonResponse* response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete response_;
  }
  if (response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, response, submessage_arena);
    }
    
  } else {
    
  }
  response_ = response;
  // @@protoc_insertion_point(field_set_allocated:ascend.presenter.facial_recognition.FaceResult.response)
}

// repeated .ascend.presenter.facial_recognition.FaceFeature feature = 3;
inline int FaceResult::feature_size() const {
  return feature_.size();
}
inline void FaceResult::clear_feature() {
  feature_.Clear();
}
inline ::ascend::presenter::facial_recognition::FaceFeature* FaceResult::mutable_feature(int index) {
  // @@protoc_insertion_point(field_mutable:ascend.presenter.facial_recognition.FaceResult.feature)
  return feature_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ascend::presenter::facial_recognition::FaceFeature >*
FaceResult::mutable_feature() {
  // @@protoc_insertion_point(field_mutable_list:ascend.presenter.facial_recognition.FaceResult.feature)
  return &feature_;
}
inline const ::ascend::presenter::facial_recognition::FaceFeature& FaceResult::feature(int index) const {
  // @@protoc_insertion_point(field_get:ascend.presenter.facial_recognition.FaceResult.feature)
  return feature_.Get(index);
}
inline ::ascend::presenter::facial_recognition::FaceFeature* FaceResult::add_feature() {
  // @@protoc_insertion_point(field_add:ascend.presenter.facial_recognition.FaceResult.feature)
  return feature_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ascend::presenter::facial_recognition::FaceFeature >&
FaceResult::feature() const {
  // @@protoc_insertion_point(field_list:ascend.presenter.facial_recognition.FaceResult.feature)
  return feature_;
}

// -------------------------------------------------------------------

// FrameInfo

// bytes image = 1;
inline void FrameInfo::clear_image() {
  image_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& FrameInfo::image() const {
  // @@protoc_insertion_point(field_get:ascend.presenter.facial_recognition.FrameInfo.image)
  return image_.GetNoArena();
}
inline void FrameInfo::set_image(const std::string& value) {
  
  image_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ascend.presenter.facial_recognition.FrameInfo.image)
}
inline void FrameInfo::set_image(std::string&& value) {
  
  image_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ascend.presenter.facial_recognition.FrameInfo.image)
}
inline void FrameInfo::set_image(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  image_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ascend.presenter.facial_recognition.FrameInfo.image)
}
inline void FrameInfo::set_image(const void* value, size_t size) {
  
  image_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ascend.presenter.facial_recognition.FrameInfo.image)
}
inline std::string* FrameInfo::mutable_image() {
  
  // @@protoc_insertion_point(field_mutable:ascend.presenter.facial_recognition.FrameInfo.image)
  return image_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* FrameInfo::release_image() {
  // @@protoc_insertion_point(field_release:ascend.presenter.facial_recognition.FrameInfo.image)
  
  return image_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void FrameInfo::set_allocated_image(std::string* image) {
  if (image != nullptr) {
    
  } else {
    
  }
  image_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), image);
  // @@protoc_insertion_point(field_set_allocated:ascend.presenter.facial_recognition.FrameInfo.image)
}

// repeated .ascend.presenter.facial_recognition.FaceFeature feature = 2;
inline int FrameInfo::feature_size() const {
  return feature_.size();
}
inline void FrameInfo::clear_feature() {
  feature_.Clear();
}
inline ::ascend::presenter::facial_recognition::FaceFeature* FrameInfo::mutable_feature(int index) {
  // @@protoc_insertion_point(field_mutable:ascend.presenter.facial_recognition.FrameInfo.feature)
  return feature_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ascend::presenter::facial_recognition::FaceFeature >*
FrameInfo::mutable_feature() {
  // @@protoc_insertion_point(field_mutable_list:ascend.presenter.facial_recognition.FrameInfo.feature)
  return &feature_;
}
inline const ::ascend::presenter::facial_recognition::FaceFeature& FrameInfo::feature(int index) const {
  // @@protoc_insertion_point(field_get:ascend.presenter.facial_recognition.FrameInfo.feature)
  return feature_.Get(index);
}
inline ::ascend::presenter::facial_recognition::FaceFeature* FrameInfo::add_feature() {
  // @@protoc_insertion_point(field_add:ascend.presenter.facial_recognition.FrameInfo.feature)
  return feature_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ascend::presenter::facial_recognition::FaceFeature >&
FrameInfo::feature() const {
  // @@protoc_insertion_point(field_list:ascend.presenter.facial_recognition.FrameInfo.feature)
  return feature_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace facial_recognition
}  // namespace presenter
}  // namespace ascend

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::ascend::presenter::facial_recognition::ErrorCode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ascend::presenter::facial_recognition::ErrorCode>() {
  return ::ascend::presenter::facial_recognition::ErrorCode_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_facial_5frecognition_5fmessage_2eproto
