// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: presenter_message.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_presenter_5fmessage_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_presenter_5fmessage_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_presenter_5fmessage_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_presenter_5fmessage_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[7]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_presenter_5fmessage_2eproto;
namespace ascend {
namespace presenter {
namespace proto {
class Coordinate;
class CoordinateDefaultTypeInternal;
extern CoordinateDefaultTypeInternal _Coordinate_default_instance_;
class HeartbeatMessage;
class HeartbeatMessageDefaultTypeInternal;
extern HeartbeatMessageDefaultTypeInternal _HeartbeatMessage_default_instance_;
class OpenChannelRequest;
class OpenChannelRequestDefaultTypeInternal;
extern OpenChannelRequestDefaultTypeInternal _OpenChannelRequest_default_instance_;
class OpenChannelResponse;
class OpenChannelResponseDefaultTypeInternal;
extern OpenChannelResponseDefaultTypeInternal _OpenChannelResponse_default_instance_;
class PresentImageRequest;
class PresentImageRequestDefaultTypeInternal;
extern PresentImageRequestDefaultTypeInternal _PresentImageRequest_default_instance_;
class PresentImageResponse;
class PresentImageResponseDefaultTypeInternal;
extern PresentImageResponseDefaultTypeInternal _PresentImageResponse_default_instance_;
class Rectangle_Attr;
class Rectangle_AttrDefaultTypeInternal;
extern Rectangle_AttrDefaultTypeInternal _Rectangle_Attr_default_instance_;
}  // namespace proto
}  // namespace presenter
}  // namespace ascend
PROTOBUF_NAMESPACE_OPEN
template<> ::ascend::presenter::proto::Coordinate* Arena::CreateMaybeMessage<::ascend::presenter::proto::Coordinate>(Arena*);
template<> ::ascend::presenter::proto::HeartbeatMessage* Arena::CreateMaybeMessage<::ascend::presenter::proto::HeartbeatMessage>(Arena*);
template<> ::ascend::presenter::proto::OpenChannelRequest* Arena::CreateMaybeMessage<::ascend::presenter::proto::OpenChannelRequest>(Arena*);
template<> ::ascend::presenter::proto::OpenChannelResponse* Arena::CreateMaybeMessage<::ascend::presenter::proto::OpenChannelResponse>(Arena*);
template<> ::ascend::presenter::proto::PresentImageRequest* Arena::CreateMaybeMessage<::ascend::presenter::proto::PresentImageRequest>(Arena*);
template<> ::ascend::presenter::proto::PresentImageResponse* Arena::CreateMaybeMessage<::ascend::presenter::proto::PresentImageResponse>(Arena*);
template<> ::ascend::presenter::proto::Rectangle_Attr* Arena::CreateMaybeMessage<::ascend::presenter::proto::Rectangle_Attr>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace ascend {
namespace presenter {
namespace proto {

enum OpenChannelErrorCode : int {
  kOpenChannelErrorNone = 0,
  kOpenChannelErrorNoSuchChannel = 1,
  kOpenChannelErrorChannelAlreadyOpened = 2,
  kOpenChannelErrorOther = -1,
  OpenChannelErrorCode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  OpenChannelErrorCode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool OpenChannelErrorCode_IsValid(int value);
constexpr OpenChannelErrorCode OpenChannelErrorCode_MIN = kOpenChannelErrorOther;
constexpr OpenChannelErrorCode OpenChannelErrorCode_MAX = kOpenChannelErrorChannelAlreadyOpened;
constexpr int OpenChannelErrorCode_ARRAYSIZE = OpenChannelErrorCode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* OpenChannelErrorCode_descriptor();
template<typename T>
inline const std::string& OpenChannelErrorCode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, OpenChannelErrorCode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function OpenChannelErrorCode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    OpenChannelErrorCode_descriptor(), enum_t_value);
}
inline bool OpenChannelErrorCode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, OpenChannelErrorCode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<OpenChannelErrorCode>(
    OpenChannelErrorCode_descriptor(), name, value);
}
enum ChannelContentType : int {
  kChannelContentTypeImage = 0,
  kChannelContentTypeVideo = 1,
  ChannelContentType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ChannelContentType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ChannelContentType_IsValid(int value);
constexpr ChannelContentType ChannelContentType_MIN = kChannelContentTypeImage;
constexpr ChannelContentType ChannelContentType_MAX = kChannelContentTypeVideo;
constexpr int ChannelContentType_ARRAYSIZE = ChannelContentType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ChannelContentType_descriptor();
template<typename T>
inline const std::string& ChannelContentType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ChannelContentType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ChannelContentType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ChannelContentType_descriptor(), enum_t_value);
}
inline bool ChannelContentType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ChannelContentType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ChannelContentType>(
    ChannelContentType_descriptor(), name, value);
}
enum ImageFormat : int {
  kImageFormatJpeg = 0,
  ImageFormat_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ImageFormat_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ImageFormat_IsValid(int value);
constexpr ImageFormat ImageFormat_MIN = kImageFormatJpeg;
constexpr ImageFormat ImageFormat_MAX = kImageFormatJpeg;
constexpr int ImageFormat_ARRAYSIZE = ImageFormat_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ImageFormat_descriptor();
template<typename T>
inline const std::string& ImageFormat_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ImageFormat>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ImageFormat_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ImageFormat_descriptor(), enum_t_value);
}
inline bool ImageFormat_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ImageFormat* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ImageFormat>(
    ImageFormat_descriptor(), name, value);
}
enum PresentDataErrorCode : int {
  kPresentDataErrorNone = 0,
  kPresentDataErrorUnsupportedType = 1,
  kPresentDataErrorUnsupportedFormat = 2,
  kPresentDataErrorOther = -1,
  PresentDataErrorCode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  PresentDataErrorCode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool PresentDataErrorCode_IsValid(int value);
constexpr PresentDataErrorCode PresentDataErrorCode_MIN = kPresentDataErrorOther;
constexpr PresentDataErrorCode PresentDataErrorCode_MAX = kPresentDataErrorUnsupportedFormat;
constexpr int PresentDataErrorCode_ARRAYSIZE = PresentDataErrorCode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PresentDataErrorCode_descriptor();
template<typename T>
inline const std::string& PresentDataErrorCode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PresentDataErrorCode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PresentDataErrorCode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PresentDataErrorCode_descriptor(), enum_t_value);
}
inline bool PresentDataErrorCode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, PresentDataErrorCode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PresentDataErrorCode>(
    PresentDataErrorCode_descriptor(), name, value);
}
// ===================================================================

class OpenChannelRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ascend.presenter.proto.OpenChannelRequest) */ {
 public:
  inline OpenChannelRequest() : OpenChannelRequest(nullptr) {}
  virtual ~OpenChannelRequest();

  OpenChannelRequest(const OpenChannelRequest& from);
  OpenChannelRequest(OpenChannelRequest&& from) noexcept
    : OpenChannelRequest() {
    *this = ::std::move(from);
  }

  inline OpenChannelRequest& operator=(const OpenChannelRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline OpenChannelRequest& operator=(OpenChannelRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OpenChannelRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OpenChannelRequest* internal_default_instance() {
    return reinterpret_cast<const OpenChannelRequest*>(
               &_OpenChannelRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(OpenChannelRequest& a, OpenChannelRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(OpenChannelRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OpenChannelRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OpenChannelRequest* New() const final {
    return CreateMaybeMessage<OpenChannelRequest>(nullptr);
  }

  OpenChannelRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OpenChannelRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OpenChannelRequest& from);
  void MergeFrom(const OpenChannelRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OpenChannelRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ascend.presenter.proto.OpenChannelRequest";
  }
  protected:
  explicit OpenChannelRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_presenter_5fmessage_2eproto);
    return ::descriptor_table_presenter_5fmessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChannelNameFieldNumber = 1,
    kContentTypeFieldNumber = 2,
  };
  // string channel_name = 1;
  void clear_channel_name();
  const std::string& channel_name() const;
  void set_channel_name(const std::string& value);
  void set_channel_name(std::string&& value);
  void set_channel_name(const char* value);
  void set_channel_name(const char* value, size_t size);
  std::string* mutable_channel_name();
  std::string* release_channel_name();
  void set_allocated_channel_name(std::string* channel_name);
  private:
  const std::string& _internal_channel_name() const;
  void _internal_set_channel_name(const std::string& value);
  std::string* _internal_mutable_channel_name();
  public:

  // .ascend.presenter.proto.ChannelContentType content_type = 2;
  void clear_content_type();
  ::ascend::presenter::proto::ChannelContentType content_type() const;
  void set_content_type(::ascend::presenter::proto::ChannelContentType value);
  private:
  ::ascend::presenter::proto::ChannelContentType _internal_content_type() const;
  void _internal_set_content_type(::ascend::presenter::proto::ChannelContentType value);
  public:

  // @@protoc_insertion_point(class_scope:ascend.presenter.proto.OpenChannelRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr channel_name_;
  int content_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_presenter_5fmessage_2eproto;
};
// -------------------------------------------------------------------

class OpenChannelResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ascend.presenter.proto.OpenChannelResponse) */ {
 public:
  inline OpenChannelResponse() : OpenChannelResponse(nullptr) {}
  virtual ~OpenChannelResponse();

  OpenChannelResponse(const OpenChannelResponse& from);
  OpenChannelResponse(OpenChannelResponse&& from) noexcept
    : OpenChannelResponse() {
    *this = ::std::move(from);
  }

  inline OpenChannelResponse& operator=(const OpenChannelResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline OpenChannelResponse& operator=(OpenChannelResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OpenChannelResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OpenChannelResponse* internal_default_instance() {
    return reinterpret_cast<const OpenChannelResponse*>(
               &_OpenChannelResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(OpenChannelResponse& a, OpenChannelResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(OpenChannelResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OpenChannelResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OpenChannelResponse* New() const final {
    return CreateMaybeMessage<OpenChannelResponse>(nullptr);
  }

  OpenChannelResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OpenChannelResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OpenChannelResponse& from);
  void MergeFrom(const OpenChannelResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OpenChannelResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ascend.presenter.proto.OpenChannelResponse";
  }
  protected:
  explicit OpenChannelResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_presenter_5fmessage_2eproto);
    return ::descriptor_table_presenter_5fmessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorMessageFieldNumber = 2,
    kErrorCodeFieldNumber = 1,
  };
  // string error_message = 2;
  void clear_error_message();
  const std::string& error_message() const;
  void set_error_message(const std::string& value);
  void set_error_message(std::string&& value);
  void set_error_message(const char* value);
  void set_error_message(const char* value, size_t size);
  std::string* mutable_error_message();
  std::string* release_error_message();
  void set_allocated_error_message(std::string* error_message);
  private:
  const std::string& _internal_error_message() const;
  void _internal_set_error_message(const std::string& value);
  std::string* _internal_mutable_error_message();
  public:

  // .ascend.presenter.proto.OpenChannelErrorCode error_code = 1;
  void clear_error_code();
  ::ascend::presenter::proto::OpenChannelErrorCode error_code() const;
  void set_error_code(::ascend::presenter::proto::OpenChannelErrorCode value);
  private:
  ::ascend::presenter::proto::OpenChannelErrorCode _internal_error_code() const;
  void _internal_set_error_code(::ascend::presenter::proto::OpenChannelErrorCode value);
  public:

  // @@protoc_insertion_point(class_scope:ascend.presenter.proto.OpenChannelResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_message_;
  int error_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_presenter_5fmessage_2eproto;
};
// -------------------------------------------------------------------

class HeartbeatMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ascend.presenter.proto.HeartbeatMessage) */ {
 public:
  inline HeartbeatMessage() : HeartbeatMessage(nullptr) {}
  virtual ~HeartbeatMessage();

  HeartbeatMessage(const HeartbeatMessage& from);
  HeartbeatMessage(HeartbeatMessage&& from) noexcept
    : HeartbeatMessage() {
    *this = ::std::move(from);
  }

  inline HeartbeatMessage& operator=(const HeartbeatMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline HeartbeatMessage& operator=(HeartbeatMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HeartbeatMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HeartbeatMessage* internal_default_instance() {
    return reinterpret_cast<const HeartbeatMessage*>(
               &_HeartbeatMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(HeartbeatMessage& a, HeartbeatMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(HeartbeatMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HeartbeatMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HeartbeatMessage* New() const final {
    return CreateMaybeMessage<HeartbeatMessage>(nullptr);
  }

  HeartbeatMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HeartbeatMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HeartbeatMessage& from);
  void MergeFrom(const HeartbeatMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HeartbeatMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ascend.presenter.proto.HeartbeatMessage";
  }
  protected:
  explicit HeartbeatMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_presenter_5fmessage_2eproto);
    return ::descriptor_table_presenter_5fmessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:ascend.presenter.proto.HeartbeatMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_presenter_5fmessage_2eproto;
};
// -------------------------------------------------------------------

class Coordinate PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ascend.presenter.proto.Coordinate) */ {
 public:
  inline Coordinate() : Coordinate(nullptr) {}
  virtual ~Coordinate();

  Coordinate(const Coordinate& from);
  Coordinate(Coordinate&& from) noexcept
    : Coordinate() {
    *this = ::std::move(from);
  }

  inline Coordinate& operator=(const Coordinate& from) {
    CopyFrom(from);
    return *this;
  }
  inline Coordinate& operator=(Coordinate&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Coordinate& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Coordinate* internal_default_instance() {
    return reinterpret_cast<const Coordinate*>(
               &_Coordinate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Coordinate& a, Coordinate& b) {
    a.Swap(&b);
  }
  inline void Swap(Coordinate* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Coordinate* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Coordinate* New() const final {
    return CreateMaybeMessage<Coordinate>(nullptr);
  }

  Coordinate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Coordinate>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Coordinate& from);
  void MergeFrom(const Coordinate& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Coordinate* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ascend.presenter.proto.Coordinate";
  }
  protected:
  explicit Coordinate(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_presenter_5fmessage_2eproto);
    return ::descriptor_table_presenter_5fmessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
  };
  // uint32 x = 1;
  void clear_x();
  ::PROTOBUF_NAMESPACE_ID::uint32 x() const;
  void set_x(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_x() const;
  void _internal_set_x(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 y = 2;
  void clear_y();
  ::PROTOBUF_NAMESPACE_ID::uint32 y() const;
  void set_y(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_y() const;
  void _internal_set_y(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:ascend.presenter.proto.Coordinate)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 x_;
  ::PROTOBUF_NAMESPACE_ID::uint32 y_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_presenter_5fmessage_2eproto;
};
// -------------------------------------------------------------------

class Rectangle_Attr PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ascend.presenter.proto.Rectangle_Attr) */ {
 public:
  inline Rectangle_Attr() : Rectangle_Attr(nullptr) {}
  virtual ~Rectangle_Attr();

  Rectangle_Attr(const Rectangle_Attr& from);
  Rectangle_Attr(Rectangle_Attr&& from) noexcept
    : Rectangle_Attr() {
    *this = ::std::move(from);
  }

  inline Rectangle_Attr& operator=(const Rectangle_Attr& from) {
    CopyFrom(from);
    return *this;
  }
  inline Rectangle_Attr& operator=(Rectangle_Attr&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Rectangle_Attr& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Rectangle_Attr* internal_default_instance() {
    return reinterpret_cast<const Rectangle_Attr*>(
               &_Rectangle_Attr_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Rectangle_Attr& a, Rectangle_Attr& b) {
    a.Swap(&b);
  }
  inline void Swap(Rectangle_Attr* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Rectangle_Attr* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Rectangle_Attr* New() const final {
    return CreateMaybeMessage<Rectangle_Attr>(nullptr);
  }

  Rectangle_Attr* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Rectangle_Attr>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Rectangle_Attr& from);
  void MergeFrom(const Rectangle_Attr& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Rectangle_Attr* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ascend.presenter.proto.Rectangle_Attr";
  }
  protected:
  explicit Rectangle_Attr(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_presenter_5fmessage_2eproto);
    return ::descriptor_table_presenter_5fmessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLabelTextFieldNumber = 3,
    kLeftTopFieldNumber = 1,
    kRightBottomFieldNumber = 2,
  };
  // string label_text = 3;
  void clear_label_text();
  const std::string& label_text() const;
  void set_label_text(const std::string& value);
  void set_label_text(std::string&& value);
  void set_label_text(const char* value);
  void set_label_text(const char* value, size_t size);
  std::string* mutable_label_text();
  std::string* release_label_text();
  void set_allocated_label_text(std::string* label_text);
  private:
  const std::string& _internal_label_text() const;
  void _internal_set_label_text(const std::string& value);
  std::string* _internal_mutable_label_text();
  public:

  // .ascend.presenter.proto.Coordinate left_top = 1;
  bool has_left_top() const;
  private:
  bool _internal_has_left_top() const;
  public:
  void clear_left_top();
  const ::ascend::presenter::proto::Coordinate& left_top() const;
  ::ascend::presenter::proto::Coordinate* release_left_top();
  ::ascend::presenter::proto::Coordinate* mutable_left_top();
  void set_allocated_left_top(::ascend::presenter::proto::Coordinate* left_top);
  private:
  const ::ascend::presenter::proto::Coordinate& _internal_left_top() const;
  ::ascend::presenter::proto::Coordinate* _internal_mutable_left_top();
  public:
  void unsafe_arena_set_allocated_left_top(
      ::ascend::presenter::proto::Coordinate* left_top);
  ::ascend::presenter::proto::Coordinate* unsafe_arena_release_left_top();

  // .ascend.presenter.proto.Coordinate right_bottom = 2;
  bool has_right_bottom() const;
  private:
  bool _internal_has_right_bottom() const;
  public:
  void clear_right_bottom();
  const ::ascend::presenter::proto::Coordinate& right_bottom() const;
  ::ascend::presenter::proto::Coordinate* release_right_bottom();
  ::ascend::presenter::proto::Coordinate* mutable_right_bottom();
  void set_allocated_right_bottom(::ascend::presenter::proto::Coordinate* right_bottom);
  private:
  const ::ascend::presenter::proto::Coordinate& _internal_right_bottom() const;
  ::ascend::presenter::proto::Coordinate* _internal_mutable_right_bottom();
  public:
  void unsafe_arena_set_allocated_right_bottom(
      ::ascend::presenter::proto::Coordinate* right_bottom);
  ::ascend::presenter::proto::Coordinate* unsafe_arena_release_right_bottom();

  // @@protoc_insertion_point(class_scope:ascend.presenter.proto.Rectangle_Attr)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr label_text_;
  ::ascend::presenter::proto::Coordinate* left_top_;
  ::ascend::presenter::proto::Coordinate* right_bottom_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_presenter_5fmessage_2eproto;
};
// -------------------------------------------------------------------

class PresentImageRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ascend.presenter.proto.PresentImageRequest) */ {
 public:
  inline PresentImageRequest() : PresentImageRequest(nullptr) {}
  virtual ~PresentImageRequest();

  PresentImageRequest(const PresentImageRequest& from);
  PresentImageRequest(PresentImageRequest&& from) noexcept
    : PresentImageRequest() {
    *this = ::std::move(from);
  }

  inline PresentImageRequest& operator=(const PresentImageRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PresentImageRequest& operator=(PresentImageRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PresentImageRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PresentImageRequest* internal_default_instance() {
    return reinterpret_cast<const PresentImageRequest*>(
               &_PresentImageRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(PresentImageRequest& a, PresentImageRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PresentImageRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PresentImageRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PresentImageRequest* New() const final {
    return CreateMaybeMessage<PresentImageRequest>(nullptr);
  }

  PresentImageRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PresentImageRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PresentImageRequest& from);
  void MergeFrom(const PresentImageRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PresentImageRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ascend.presenter.proto.PresentImageRequest";
  }
  protected:
  explicit PresentImageRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_presenter_5fmessage_2eproto);
    return ::descriptor_table_presenter_5fmessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRectangleListFieldNumber = 5,
    kDataFieldNumber = 4,
    kFormatFieldNumber = 1,
    kWidthFieldNumber = 2,
    kHeightFieldNumber = 3,
  };
  // repeated .ascend.presenter.proto.Rectangle_Attr rectangle_list = 5;
  int rectangle_list_size() const;
  private:
  int _internal_rectangle_list_size() const;
  public:
  void clear_rectangle_list();
  ::ascend::presenter::proto::Rectangle_Attr* mutable_rectangle_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ascend::presenter::proto::Rectangle_Attr >*
      mutable_rectangle_list();
  private:
  const ::ascend::presenter::proto::Rectangle_Attr& _internal_rectangle_list(int index) const;
  ::ascend::presenter::proto::Rectangle_Attr* _internal_add_rectangle_list();
  public:
  const ::ascend::presenter::proto::Rectangle_Attr& rectangle_list(int index) const;
  ::ascend::presenter::proto::Rectangle_Attr* add_rectangle_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ascend::presenter::proto::Rectangle_Attr >&
      rectangle_list() const;

  // bytes data = 4;
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // .ascend.presenter.proto.ImageFormat format = 1;
  void clear_format();
  ::ascend::presenter::proto::ImageFormat format() const;
  void set_format(::ascend::presenter::proto::ImageFormat value);
  private:
  ::ascend::presenter::proto::ImageFormat _internal_format() const;
  void _internal_set_format(::ascend::presenter::proto::ImageFormat value);
  public:

  // uint32 width = 2;
  void clear_width();
  ::PROTOBUF_NAMESPACE_ID::uint32 width() const;
  void set_width(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_width() const;
  void _internal_set_width(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 height = 3;
  void clear_height();
  ::PROTOBUF_NAMESPACE_ID::uint32 height() const;
  void set_height(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_height() const;
  void _internal_set_height(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:ascend.presenter.proto.PresentImageRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ascend::presenter::proto::Rectangle_Attr > rectangle_list_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  int format_;
  ::PROTOBUF_NAMESPACE_ID::uint32 width_;
  ::PROTOBUF_NAMESPACE_ID::uint32 height_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_presenter_5fmessage_2eproto;
};
// -------------------------------------------------------------------

class PresentImageResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ascend.presenter.proto.PresentImageResponse) */ {
 public:
  inline PresentImageResponse() : PresentImageResponse(nullptr) {}
  virtual ~PresentImageResponse();

  PresentImageResponse(const PresentImageResponse& from);
  PresentImageResponse(PresentImageResponse&& from) noexcept
    : PresentImageResponse() {
    *this = ::std::move(from);
  }

  inline PresentImageResponse& operator=(const PresentImageResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PresentImageResponse& operator=(PresentImageResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PresentImageResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PresentImageResponse* internal_default_instance() {
    return reinterpret_cast<const PresentImageResponse*>(
               &_PresentImageResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(PresentImageResponse& a, PresentImageResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(PresentImageResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PresentImageResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PresentImageResponse* New() const final {
    return CreateMaybeMessage<PresentImageResponse>(nullptr);
  }

  PresentImageResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PresentImageResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PresentImageResponse& from);
  void MergeFrom(const PresentImageResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PresentImageResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ascend.presenter.proto.PresentImageResponse";
  }
  protected:
  explicit PresentImageResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_presenter_5fmessage_2eproto);
    return ::descriptor_table_presenter_5fmessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorMessageFieldNumber = 2,
    kErrorCodeFieldNumber = 1,
  };
  // string error_message = 2;
  void clear_error_message();
  const std::string& error_message() const;
  void set_error_message(const std::string& value);
  void set_error_message(std::string&& value);
  void set_error_message(const char* value);
  void set_error_message(const char* value, size_t size);
  std::string* mutable_error_message();
  std::string* release_error_message();
  void set_allocated_error_message(std::string* error_message);
  private:
  const std::string& _internal_error_message() const;
  void _internal_set_error_message(const std::string& value);
  std::string* _internal_mutable_error_message();
  public:

  // .ascend.presenter.proto.PresentDataErrorCode error_code = 1;
  void clear_error_code();
  ::ascend::presenter::proto::PresentDataErrorCode error_code() const;
  void set_error_code(::ascend::presenter::proto::PresentDataErrorCode value);
  private:
  ::ascend::presenter::proto::PresentDataErrorCode _internal_error_code() const;
  void _internal_set_error_code(::ascend::presenter::proto::PresentDataErrorCode value);
  public:

  // @@protoc_insertion_point(class_scope:ascend.presenter.proto.PresentImageResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_message_;
  int error_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_presenter_5fmessage_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// OpenChannelRequest

// string channel_name = 1;
inline void OpenChannelRequest::clear_channel_name() {
  channel_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& OpenChannelRequest::channel_name() const {
  // @@protoc_insertion_point(field_get:ascend.presenter.proto.OpenChannelRequest.channel_name)
  return _internal_channel_name();
}
inline void OpenChannelRequest::set_channel_name(const std::string& value) {
  _internal_set_channel_name(value);
  // @@protoc_insertion_point(field_set:ascend.presenter.proto.OpenChannelRequest.channel_name)
}
inline std::string* OpenChannelRequest::mutable_channel_name() {
  // @@protoc_insertion_point(field_mutable:ascend.presenter.proto.OpenChannelRequest.channel_name)
  return _internal_mutable_channel_name();
}
inline const std::string& OpenChannelRequest::_internal_channel_name() const {
  return channel_name_.Get();
}
inline void OpenChannelRequest::_internal_set_channel_name(const std::string& value) {
  
  channel_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void OpenChannelRequest::set_channel_name(std::string&& value) {
  
  channel_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ascend.presenter.proto.OpenChannelRequest.channel_name)
}
inline void OpenChannelRequest::set_channel_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  channel_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ascend.presenter.proto.OpenChannelRequest.channel_name)
}
inline void OpenChannelRequest::set_channel_name(const char* value,
    size_t size) {
  
  channel_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ascend.presenter.proto.OpenChannelRequest.channel_name)
}
inline std::string* OpenChannelRequest::_internal_mutable_channel_name() {
  
  return channel_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* OpenChannelRequest::release_channel_name() {
  // @@protoc_insertion_point(field_release:ascend.presenter.proto.OpenChannelRequest.channel_name)
  return channel_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OpenChannelRequest::set_allocated_channel_name(std::string* channel_name) {
  if (channel_name != nullptr) {
    
  } else {
    
  }
  channel_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), channel_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ascend.presenter.proto.OpenChannelRequest.channel_name)
}

// .ascend.presenter.proto.ChannelContentType content_type = 2;
inline void OpenChannelRequest::clear_content_type() {
  content_type_ = 0;
}
inline ::ascend::presenter::proto::ChannelContentType OpenChannelRequest::_internal_content_type() const {
  return static_cast< ::ascend::presenter::proto::ChannelContentType >(content_type_);
}
inline ::ascend::presenter::proto::ChannelContentType OpenChannelRequest::content_type() const {
  // @@protoc_insertion_point(field_get:ascend.presenter.proto.OpenChannelRequest.content_type)
  return _internal_content_type();
}
inline void OpenChannelRequest::_internal_set_content_type(::ascend::presenter::proto::ChannelContentType value) {
  
  content_type_ = value;
}
inline void OpenChannelRequest::set_content_type(::ascend::presenter::proto::ChannelContentType value) {
  _internal_set_content_type(value);
  // @@protoc_insertion_point(field_set:ascend.presenter.proto.OpenChannelRequest.content_type)
}

// -------------------------------------------------------------------

// OpenChannelResponse

// .ascend.presenter.proto.OpenChannelErrorCode error_code = 1;
inline void OpenChannelResponse::clear_error_code() {
  error_code_ = 0;
}
inline ::ascend::presenter::proto::OpenChannelErrorCode OpenChannelResponse::_internal_error_code() const {
  return static_cast< ::ascend::presenter::proto::OpenChannelErrorCode >(error_code_);
}
inline ::ascend::presenter::proto::OpenChannelErrorCode OpenChannelResponse::error_code() const {
  // @@protoc_insertion_point(field_get:ascend.presenter.proto.OpenChannelResponse.error_code)
  return _internal_error_code();
}
inline void OpenChannelResponse::_internal_set_error_code(::ascend::presenter::proto::OpenChannelErrorCode value) {
  
  error_code_ = value;
}
inline void OpenChannelResponse::set_error_code(::ascend::presenter::proto::OpenChannelErrorCode value) {
  _internal_set_error_code(value);
  // @@protoc_insertion_point(field_set:ascend.presenter.proto.OpenChannelResponse.error_code)
}

// string error_message = 2;
inline void OpenChannelResponse::clear_error_message() {
  error_message_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& OpenChannelResponse::error_message() const {
  // @@protoc_insertion_point(field_get:ascend.presenter.proto.OpenChannelResponse.error_message)
  return _internal_error_message();
}
inline void OpenChannelResponse::set_error_message(const std::string& value) {
  _internal_set_error_message(value);
  // @@protoc_insertion_point(field_set:ascend.presenter.proto.OpenChannelResponse.error_message)
}
inline std::string* OpenChannelResponse::mutable_error_message() {
  // @@protoc_insertion_point(field_mutable:ascend.presenter.proto.OpenChannelResponse.error_message)
  return _internal_mutable_error_message();
}
inline const std::string& OpenChannelResponse::_internal_error_message() const {
  return error_message_.Get();
}
inline void OpenChannelResponse::_internal_set_error_message(const std::string& value) {
  
  error_message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void OpenChannelResponse::set_error_message(std::string&& value) {
  
  error_message_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ascend.presenter.proto.OpenChannelResponse.error_message)
}
inline void OpenChannelResponse::set_error_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  error_message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ascend.presenter.proto.OpenChannelResponse.error_message)
}
inline void OpenChannelResponse::set_error_message(const char* value,
    size_t size) {
  
  error_message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ascend.presenter.proto.OpenChannelResponse.error_message)
}
inline std::string* OpenChannelResponse::_internal_mutable_error_message() {
  
  return error_message_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* OpenChannelResponse::release_error_message() {
  // @@protoc_insertion_point(field_release:ascend.presenter.proto.OpenChannelResponse.error_message)
  return error_message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OpenChannelResponse::set_allocated_error_message(std::string* error_message) {
  if (error_message != nullptr) {
    
  } else {
    
  }
  error_message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), error_message,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ascend.presenter.proto.OpenChannelResponse.error_message)
}

// -------------------------------------------------------------------

// HeartbeatMessage

// -------------------------------------------------------------------

// Coordinate

// uint32 x = 1;
inline void Coordinate::clear_x() {
  x_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Coordinate::_internal_x() const {
  return x_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Coordinate::x() const {
  // @@protoc_insertion_point(field_get:ascend.presenter.proto.Coordinate.x)
  return _internal_x();
}
inline void Coordinate::_internal_set_x(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  x_ = value;
}
inline void Coordinate::set_x(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:ascend.presenter.proto.Coordinate.x)
}

// uint32 y = 2;
inline void Coordinate::clear_y() {
  y_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Coordinate::_internal_y() const {
  return y_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Coordinate::y() const {
  // @@protoc_insertion_point(field_get:ascend.presenter.proto.Coordinate.y)
  return _internal_y();
}
inline void Coordinate::_internal_set_y(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  y_ = value;
}
inline void Coordinate::set_y(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:ascend.presenter.proto.Coordinate.y)
}

// -------------------------------------------------------------------

// Rectangle_Attr

// .ascend.presenter.proto.Coordinate left_top = 1;
inline bool Rectangle_Attr::_internal_has_left_top() const {
  return this != internal_default_instance() && left_top_ != nullptr;
}
inline bool Rectangle_Attr::has_left_top() const {
  return _internal_has_left_top();
}
inline void Rectangle_Attr::clear_left_top() {
  if (GetArena() == nullptr && left_top_ != nullptr) {
    delete left_top_;
  }
  left_top_ = nullptr;
}
inline const ::ascend::presenter::proto::Coordinate& Rectangle_Attr::_internal_left_top() const {
  const ::ascend::presenter::proto::Coordinate* p = left_top_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ascend::presenter::proto::Coordinate*>(
      &::ascend::presenter::proto::_Coordinate_default_instance_);
}
inline const ::ascend::presenter::proto::Coordinate& Rectangle_Attr::left_top() const {
  // @@protoc_insertion_point(field_get:ascend.presenter.proto.Rectangle_Attr.left_top)
  return _internal_left_top();
}
inline void Rectangle_Attr::unsafe_arena_set_allocated_left_top(
    ::ascend::presenter::proto::Coordinate* left_top) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(left_top_);
  }
  left_top_ = left_top;
  if (left_top) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ascend.presenter.proto.Rectangle_Attr.left_top)
}
inline ::ascend::presenter::proto::Coordinate* Rectangle_Attr::release_left_top() {
  
  ::ascend::presenter::proto::Coordinate* temp = left_top_;
  left_top_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ascend::presenter::proto::Coordinate* Rectangle_Attr::unsafe_arena_release_left_top() {
  // @@protoc_insertion_point(field_release:ascend.presenter.proto.Rectangle_Attr.left_top)
  
  ::ascend::presenter::proto::Coordinate* temp = left_top_;
  left_top_ = nullptr;
  return temp;
}
inline ::ascend::presenter::proto::Coordinate* Rectangle_Attr::_internal_mutable_left_top() {
  
  if (left_top_ == nullptr) {
    auto* p = CreateMaybeMessage<::ascend::presenter::proto::Coordinate>(GetArena());
    left_top_ = p;
  }
  return left_top_;
}
inline ::ascend::presenter::proto::Coordinate* Rectangle_Attr::mutable_left_top() {
  // @@protoc_insertion_point(field_mutable:ascend.presenter.proto.Rectangle_Attr.left_top)
  return _internal_mutable_left_top();
}
inline void Rectangle_Attr::set_allocated_left_top(::ascend::presenter::proto::Coordinate* left_top) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete left_top_;
  }
  if (left_top) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(left_top);
    if (message_arena != submessage_arena) {
      left_top = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, left_top, submessage_arena);
    }
    
  } else {
    
  }
  left_top_ = left_top;
  // @@protoc_insertion_point(field_set_allocated:ascend.presenter.proto.Rectangle_Attr.left_top)
}

// .ascend.presenter.proto.Coordinate right_bottom = 2;
inline bool Rectangle_Attr::_internal_has_right_bottom() const {
  return this != internal_default_instance() && right_bottom_ != nullptr;
}
inline bool Rectangle_Attr::has_right_bottom() const {
  return _internal_has_right_bottom();
}
inline void Rectangle_Attr::clear_right_bottom() {
  if (GetArena() == nullptr && right_bottom_ != nullptr) {
    delete right_bottom_;
  }
  right_bottom_ = nullptr;
}
inline const ::ascend::presenter::proto::Coordinate& Rectangle_Attr::_internal_right_bottom() const {
  const ::ascend::presenter::proto::Coordinate* p = right_bottom_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ascend::presenter::proto::Coordinate*>(
      &::ascend::presenter::proto::_Coordinate_default_instance_);
}
inline const ::ascend::presenter::proto::Coordinate& Rectangle_Attr::right_bottom() const {
  // @@protoc_insertion_point(field_get:ascend.presenter.proto.Rectangle_Attr.right_bottom)
  return _internal_right_bottom();
}
inline void Rectangle_Attr::unsafe_arena_set_allocated_right_bottom(
    ::ascend::presenter::proto::Coordinate* right_bottom) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(right_bottom_);
  }
  right_bottom_ = right_bottom;
  if (right_bottom) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ascend.presenter.proto.Rectangle_Attr.right_bottom)
}
inline ::ascend::presenter::proto::Coordinate* Rectangle_Attr::release_right_bottom() {
  
  ::ascend::presenter::proto::Coordinate* temp = right_bottom_;
  right_bottom_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ascend::presenter::proto::Coordinate* Rectangle_Attr::unsafe_arena_release_right_bottom() {
  // @@protoc_insertion_point(field_release:ascend.presenter.proto.Rectangle_Attr.right_bottom)
  
  ::ascend::presenter::proto::Coordinate* temp = right_bottom_;
  right_bottom_ = nullptr;
  return temp;
}
inline ::ascend::presenter::proto::Coordinate* Rectangle_Attr::_internal_mutable_right_bottom() {
  
  if (right_bottom_ == nullptr) {
    auto* p = CreateMaybeMessage<::ascend::presenter::proto::Coordinate>(GetArena());
    right_bottom_ = p;
  }
  return right_bottom_;
}
inline ::ascend::presenter::proto::Coordinate* Rectangle_Attr::mutable_right_bottom() {
  // @@protoc_insertion_point(field_mutable:ascend.presenter.proto.Rectangle_Attr.right_bottom)
  return _internal_mutable_right_bottom();
}
inline void Rectangle_Attr::set_allocated_right_bottom(::ascend::presenter::proto::Coordinate* right_bottom) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete right_bottom_;
  }
  if (right_bottom) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(right_bottom);
    if (message_arena != submessage_arena) {
      right_bottom = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, right_bottom, submessage_arena);
    }
    
  } else {
    
  }
  right_bottom_ = right_bottom;
  // @@protoc_insertion_point(field_set_allocated:ascend.presenter.proto.Rectangle_Attr.right_bottom)
}

// string label_text = 3;
inline void Rectangle_Attr::clear_label_text() {
  label_text_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Rectangle_Attr::label_text() const {
  // @@protoc_insertion_point(field_get:ascend.presenter.proto.Rectangle_Attr.label_text)
  return _internal_label_text();
}
inline void Rectangle_Attr::set_label_text(const std::string& value) {
  _internal_set_label_text(value);
  // @@protoc_insertion_point(field_set:ascend.presenter.proto.Rectangle_Attr.label_text)
}
inline std::string* Rectangle_Attr::mutable_label_text() {
  // @@protoc_insertion_point(field_mutable:ascend.presenter.proto.Rectangle_Attr.label_text)
  return _internal_mutable_label_text();
}
inline const std::string& Rectangle_Attr::_internal_label_text() const {
  return label_text_.Get();
}
inline void Rectangle_Attr::_internal_set_label_text(const std::string& value) {
  
  label_text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Rectangle_Attr::set_label_text(std::string&& value) {
  
  label_text_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ascend.presenter.proto.Rectangle_Attr.label_text)
}
inline void Rectangle_Attr::set_label_text(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  label_text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ascend.presenter.proto.Rectangle_Attr.label_text)
}
inline void Rectangle_Attr::set_label_text(const char* value,
    size_t size) {
  
  label_text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ascend.presenter.proto.Rectangle_Attr.label_text)
}
inline std::string* Rectangle_Attr::_internal_mutable_label_text() {
  
  return label_text_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Rectangle_Attr::release_label_text() {
  // @@protoc_insertion_point(field_release:ascend.presenter.proto.Rectangle_Attr.label_text)
  return label_text_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Rectangle_Attr::set_allocated_label_text(std::string* label_text) {
  if (label_text != nullptr) {
    
  } else {
    
  }
  label_text_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), label_text,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ascend.presenter.proto.Rectangle_Attr.label_text)
}

// -------------------------------------------------------------------

// PresentImageRequest

// .ascend.presenter.proto.ImageFormat format = 1;
inline void PresentImageRequest::clear_format() {
  format_ = 0;
}
inline ::ascend::presenter::proto::ImageFormat PresentImageRequest::_internal_format() const {
  return static_cast< ::ascend::presenter::proto::ImageFormat >(format_);
}
inline ::ascend::presenter::proto::ImageFormat PresentImageRequest::format() const {
  // @@protoc_insertion_point(field_get:ascend.presenter.proto.PresentImageRequest.format)
  return _internal_format();
}
inline void PresentImageRequest::_internal_set_format(::ascend::presenter::proto::ImageFormat value) {
  
  format_ = value;
}
inline void PresentImageRequest::set_format(::ascend::presenter::proto::ImageFormat value) {
  _internal_set_format(value);
  // @@protoc_insertion_point(field_set:ascend.presenter.proto.PresentImageRequest.format)
}

// uint32 width = 2;
inline void PresentImageRequest::clear_width() {
  width_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PresentImageRequest::_internal_width() const {
  return width_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PresentImageRequest::width() const {
  // @@protoc_insertion_point(field_get:ascend.presenter.proto.PresentImageRequest.width)
  return _internal_width();
}
inline void PresentImageRequest::_internal_set_width(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  width_ = value;
}
inline void PresentImageRequest::set_width(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:ascend.presenter.proto.PresentImageRequest.width)
}

// uint32 height = 3;
inline void PresentImageRequest::clear_height() {
  height_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PresentImageRequest::_internal_height() const {
  return height_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PresentImageRequest::height() const {
  // @@protoc_insertion_point(field_get:ascend.presenter.proto.PresentImageRequest.height)
  return _internal_height();
}
inline void PresentImageRequest::_internal_set_height(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  height_ = value;
}
inline void PresentImageRequest::set_height(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:ascend.presenter.proto.PresentImageRequest.height)
}

// bytes data = 4;
inline void PresentImageRequest::clear_data() {
  data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PresentImageRequest::data() const {
  // @@protoc_insertion_point(field_get:ascend.presenter.proto.PresentImageRequest.data)
  return _internal_data();
}
inline void PresentImageRequest::set_data(const std::string& value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:ascend.presenter.proto.PresentImageRequest.data)
}
inline std::string* PresentImageRequest::mutable_data() {
  // @@protoc_insertion_point(field_mutable:ascend.presenter.proto.PresentImageRequest.data)
  return _internal_mutable_data();
}
inline const std::string& PresentImageRequest::_internal_data() const {
  return data_.Get();
}
inline void PresentImageRequest::_internal_set_data(const std::string& value) {
  
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PresentImageRequest::set_data(std::string&& value) {
  
  data_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ascend.presenter.proto.PresentImageRequest.data)
}
inline void PresentImageRequest::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ascend.presenter.proto.PresentImageRequest.data)
}
inline void PresentImageRequest::set_data(const void* value,
    size_t size) {
  
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ascend.presenter.proto.PresentImageRequest.data)
}
inline std::string* PresentImageRequest::_internal_mutable_data() {
  
  return data_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PresentImageRequest::release_data() {
  // @@protoc_insertion_point(field_release:ascend.presenter.proto.PresentImageRequest.data)
  return data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PresentImageRequest::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ascend.presenter.proto.PresentImageRequest.data)
}

// repeated .ascend.presenter.proto.Rectangle_Attr rectangle_list = 5;
inline int PresentImageRequest::_internal_rectangle_list_size() const {
  return rectangle_list_.size();
}
inline int PresentImageRequest::rectangle_list_size() const {
  return _internal_rectangle_list_size();
}
inline void PresentImageRequest::clear_rectangle_list() {
  rectangle_list_.Clear();
}
inline ::ascend::presenter::proto::Rectangle_Attr* PresentImageRequest::mutable_rectangle_list(int index) {
  // @@protoc_insertion_point(field_mutable:ascend.presenter.proto.PresentImageRequest.rectangle_list)
  return rectangle_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ascend::presenter::proto::Rectangle_Attr >*
PresentImageRequest::mutable_rectangle_list() {
  // @@protoc_insertion_point(field_mutable_list:ascend.presenter.proto.PresentImageRequest.rectangle_list)
  return &rectangle_list_;
}
inline const ::ascend::presenter::proto::Rectangle_Attr& PresentImageRequest::_internal_rectangle_list(int index) const {
  return rectangle_list_.Get(index);
}
inline const ::ascend::presenter::proto::Rectangle_Attr& PresentImageRequest::rectangle_list(int index) const {
  // @@protoc_insertion_point(field_get:ascend.presenter.proto.PresentImageRequest.rectangle_list)
  return _internal_rectangle_list(index);
}
inline ::ascend::presenter::proto::Rectangle_Attr* PresentImageRequest::_internal_add_rectangle_list() {
  return rectangle_list_.Add();
}
inline ::ascend::presenter::proto::Rectangle_Attr* PresentImageRequest::add_rectangle_list() {
  // @@protoc_insertion_point(field_add:ascend.presenter.proto.PresentImageRequest.rectangle_list)
  return _internal_add_rectangle_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ascend::presenter::proto::Rectangle_Attr >&
PresentImageRequest::rectangle_list() const {
  // @@protoc_insertion_point(field_list:ascend.presenter.proto.PresentImageRequest.rectangle_list)
  return rectangle_list_;
}

// -------------------------------------------------------------------

// PresentImageResponse

// .ascend.presenter.proto.PresentDataErrorCode error_code = 1;
inline void PresentImageResponse::clear_error_code() {
  error_code_ = 0;
}
inline ::ascend::presenter::proto::PresentDataErrorCode PresentImageResponse::_internal_error_code() const {
  return static_cast< ::ascend::presenter::proto::PresentDataErrorCode >(error_code_);
}
inline ::ascend::presenter::proto::PresentDataErrorCode PresentImageResponse::error_code() const {
  // @@protoc_insertion_point(field_get:ascend.presenter.proto.PresentImageResponse.error_code)
  return _internal_error_code();
}
inline void PresentImageResponse::_internal_set_error_code(::ascend::presenter::proto::PresentDataErrorCode value) {
  
  error_code_ = value;
}
inline void PresentImageResponse::set_error_code(::ascend::presenter::proto::PresentDataErrorCode value) {
  _internal_set_error_code(value);
  // @@protoc_insertion_point(field_set:ascend.presenter.proto.PresentImageResponse.error_code)
}

// string error_message = 2;
inline void PresentImageResponse::clear_error_message() {
  error_message_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PresentImageResponse::error_message() const {
  // @@protoc_insertion_point(field_get:ascend.presenter.proto.PresentImageResponse.error_message)
  return _internal_error_message();
}
inline void PresentImageResponse::set_error_message(const std::string& value) {
  _internal_set_error_message(value);
  // @@protoc_insertion_point(field_set:ascend.presenter.proto.PresentImageResponse.error_message)
}
inline std::string* PresentImageResponse::mutable_error_message() {
  // @@protoc_insertion_point(field_mutable:ascend.presenter.proto.PresentImageResponse.error_message)
  return _internal_mutable_error_message();
}
inline const std::string& PresentImageResponse::_internal_error_message() const {
  return error_message_.Get();
}
inline void PresentImageResponse::_internal_set_error_message(const std::string& value) {
  
  error_message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PresentImageResponse::set_error_message(std::string&& value) {
  
  error_message_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ascend.presenter.proto.PresentImageResponse.error_message)
}
inline void PresentImageResponse::set_error_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  error_message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ascend.presenter.proto.PresentImageResponse.error_message)
}
inline void PresentImageResponse::set_error_message(const char* value,
    size_t size) {
  
  error_message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ascend.presenter.proto.PresentImageResponse.error_message)
}
inline std::string* PresentImageResponse::_internal_mutable_error_message() {
  
  return error_message_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PresentImageResponse::release_error_message() {
  // @@protoc_insertion_point(field_release:ascend.presenter.proto.PresentImageResponse.error_message)
  return error_message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PresentImageResponse::set_allocated_error_message(std::string* error_message) {
  if (error_message != nullptr) {
    
  } else {
    
  }
  error_message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), error_message,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ascend.presenter.proto.PresentImageResponse.error_message)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace presenter
}  // namespace ascend

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::ascend::presenter::proto::OpenChannelErrorCode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ascend::presenter::proto::OpenChannelErrorCode>() {
  return ::ascend::presenter::proto::OpenChannelErrorCode_descriptor();
}
template <> struct is_proto_enum< ::ascend::presenter::proto::ChannelContentType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ascend::presenter::proto::ChannelContentType>() {
  return ::ascend::presenter::proto::ChannelContentType_descriptor();
}
template <> struct is_proto_enum< ::ascend::presenter::proto::ImageFormat> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ascend::presenter::proto::ImageFormat>() {
  return ::ascend::presenter::proto::ImageFormat_descriptor();
}
template <> struct is_proto_enum< ::ascend::presenter::proto::PresentDataErrorCode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ascend::presenter::proto::PresentDataErrorCode>() {
  return ::ascend::presenter::proto::PresentDataErrorCode_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_presenter_5fmessage_2eproto
