// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: painting_message.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_painting_5fmessage_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_painting_5fmessage_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3008000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3008000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_painting_5fmessage_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_painting_5fmessage_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_painting_5fmessage_2eproto;
namespace PaintingMessage {
class CommonResponse;
class CommonResponseDefaultTypeInternal;
extern CommonResponseDefaultTypeInternal _CommonResponse_default_instance_;
class DataPackage;
class DataPackageDefaultTypeInternal;
extern DataPackageDefaultTypeInternal _DataPackage_default_instance_;
class ModelInputData;
class ModelInputDataDefaultTypeInternal;
extern ModelInputDataDefaultTypeInternal _ModelInputData_default_instance_;
class RegisterApp;
class RegisterAppDefaultTypeInternal;
extern RegisterAppDefaultTypeInternal _RegisterApp_default_instance_;
}  // namespace PaintingMessage
PROTOBUF_NAMESPACE_OPEN
template<> ::PaintingMessage::CommonResponse* Arena::CreateMaybeMessage<::PaintingMessage::CommonResponse>(Arena*);
template<> ::PaintingMessage::DataPackage* Arena::CreateMaybeMessage<::PaintingMessage::DataPackage>(Arena*);
template<> ::PaintingMessage::ModelInputData* Arena::CreateMaybeMessage<::PaintingMessage::ModelInputData>(Arena*);
template<> ::PaintingMessage::RegisterApp* Arena::CreateMaybeMessage<::PaintingMessage::RegisterApp>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace PaintingMessage {

enum ErrorCode : int {
  kErrorNone = 0,
  kErrorAppRegisterExist = 1,
  kErrorAppRegisterType = 2,
  kErrorAppRegisterLimit = 3,
  kErrorOther = 5,
  ErrorCode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ErrorCode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ErrorCode_IsValid(int value);
constexpr ErrorCode ErrorCode_MIN = kErrorNone;
constexpr ErrorCode ErrorCode_MAX = kErrorOther;
constexpr int ErrorCode_ARRAYSIZE = ErrorCode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ErrorCode_descriptor();
template<typename T>
inline const std::string& ErrorCode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ErrorCode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ErrorCode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ErrorCode_descriptor(), enum_t_value);
}
inline bool ErrorCode_Parse(
    const std::string& name, ErrorCode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ErrorCode>(
    ErrorCode_descriptor(), name, value);
}
// ===================================================================

class CommonResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PaintingMessage.CommonResponse) */ {
 public:
  CommonResponse();
  virtual ~CommonResponse();

  CommonResponse(const CommonResponse& from);
  CommonResponse(CommonResponse&& from) noexcept
    : CommonResponse() {
    *this = ::std::move(from);
  }

  inline CommonResponse& operator=(const CommonResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommonResponse& operator=(CommonResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CommonResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CommonResponse* internal_default_instance() {
    return reinterpret_cast<const CommonResponse*>(
               &_CommonResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(CommonResponse* other);
  friend void swap(CommonResponse& a, CommonResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CommonResponse* New() const final {
    return CreateMaybeMessage<CommonResponse>(nullptr);
  }

  CommonResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CommonResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CommonResponse& from);
  void MergeFrom(const CommonResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommonResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PaintingMessage.CommonResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_painting_5fmessage_2eproto);
    return ::descriptor_table_painting_5fmessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string message = 2;
  void clear_message();
  static const int kMessageFieldNumber = 2;
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);

  // .PaintingMessage.ErrorCode ret = 1;
  void clear_ret();
  static const int kRetFieldNumber = 1;
  ::PaintingMessage::ErrorCode ret() const;
  void set_ret(::PaintingMessage::ErrorCode value);

  // @@protoc_insertion_point(class_scope:PaintingMessage.CommonResponse)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  int ret_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_painting_5fmessage_2eproto;
};
// -------------------------------------------------------------------

class RegisterApp :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PaintingMessage.RegisterApp) */ {
 public:
  RegisterApp();
  virtual ~RegisterApp();

  RegisterApp(const RegisterApp& from);
  RegisterApp(RegisterApp&& from) noexcept
    : RegisterApp() {
    *this = ::std::move(from);
  }

  inline RegisterApp& operator=(const RegisterApp& from) {
    CopyFrom(from);
    return *this;
  }
  inline RegisterApp& operator=(RegisterApp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RegisterApp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RegisterApp* internal_default_instance() {
    return reinterpret_cast<const RegisterApp*>(
               &_RegisterApp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(RegisterApp* other);
  friend void swap(RegisterApp& a, RegisterApp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RegisterApp* New() const final {
    return CreateMaybeMessage<RegisterApp>(nullptr);
  }

  RegisterApp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RegisterApp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RegisterApp& from);
  void MergeFrom(const RegisterApp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RegisterApp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PaintingMessage.RegisterApp";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_painting_5fmessage_2eproto);
    return ::descriptor_table_painting_5fmessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);

  // string type = 2;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  const std::string& type() const;
  void set_type(const std::string& value);
  void set_type(std::string&& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  std::string* mutable_type();
  std::string* release_type();
  void set_allocated_type(std::string* type);

  // @@protoc_insertion_point(class_scope:PaintingMessage.RegisterApp)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_painting_5fmessage_2eproto;
};
// -------------------------------------------------------------------

class ModelInputData :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PaintingMessage.ModelInputData) */ {
 public:
  ModelInputData();
  virtual ~ModelInputData();

  ModelInputData(const ModelInputData& from);
  ModelInputData(ModelInputData&& from) noexcept
    : ModelInputData() {
    *this = ::std::move(from);
  }

  inline ModelInputData& operator=(const ModelInputData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ModelInputData& operator=(ModelInputData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ModelInputData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ModelInputData* internal_default_instance() {
    return reinterpret_cast<const ModelInputData*>(
               &_ModelInputData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(ModelInputData* other);
  friend void swap(ModelInputData& a, ModelInputData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ModelInputData* New() const final {
    return CreateMaybeMessage<ModelInputData>(nullptr);
  }

  ModelInputData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ModelInputData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ModelInputData& from);
  void MergeFrom(const ModelInputData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ModelInputData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PaintingMessage.ModelInputData";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_painting_5fmessage_2eproto);
    return ::descriptor_table_painting_5fmessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // bytes data = 2;
  void clear_data();
  static const int kDataFieldNumber = 2;
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);

  // @@protoc_insertion_point(class_scope:PaintingMessage.ModelInputData)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_painting_5fmessage_2eproto;
};
// -------------------------------------------------------------------

class DataPackage :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PaintingMessage.DataPackage) */ {
 public:
  DataPackage();
  virtual ~DataPackage();

  DataPackage(const DataPackage& from);
  DataPackage(DataPackage&& from) noexcept
    : DataPackage() {
    *this = ::std::move(from);
  }

  inline DataPackage& operator=(const DataPackage& from) {
    CopyFrom(from);
    return *this;
  }
  inline DataPackage& operator=(DataPackage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DataPackage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DataPackage* internal_default_instance() {
    return reinterpret_cast<const DataPackage*>(
               &_DataPackage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(DataPackage* other);
  friend void swap(DataPackage& a, DataPackage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DataPackage* New() const final {
    return CreateMaybeMessage<DataPackage>(nullptr);
  }

  DataPackage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DataPackage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DataPackage& from);
  void MergeFrom(const DataPackage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DataPackage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PaintingMessage.DataPackage";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_painting_5fmessage_2eproto);
    return ::descriptor_table_painting_5fmessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .PaintingMessage.ModelInputData objectData = 1;
  bool has_objectdata() const;
  void clear_objectdata();
  static const int kObjectDataFieldNumber = 1;
  const ::PaintingMessage::ModelInputData& objectdata() const;
  ::PaintingMessage::ModelInputData* release_objectdata();
  ::PaintingMessage::ModelInputData* mutable_objectdata();
  void set_allocated_objectdata(::PaintingMessage::ModelInputData* objectdata);

  // .PaintingMessage.ModelInputData layoutData = 2;
  bool has_layoutdata() const;
  void clear_layoutdata();
  static const int kLayoutDataFieldNumber = 2;
  const ::PaintingMessage::ModelInputData& layoutdata() const;
  ::PaintingMessage::ModelInputData* release_layoutdata();
  ::PaintingMessage::ModelInputData* mutable_layoutdata();
  void set_allocated_layoutdata(::PaintingMessage::ModelInputData* layoutdata);

  // @@protoc_insertion_point(class_scope:PaintingMessage.DataPackage)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PaintingMessage::ModelInputData* objectdata_;
  ::PaintingMessage::ModelInputData* layoutdata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_painting_5fmessage_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CommonResponse

// .PaintingMessage.ErrorCode ret = 1;
inline void CommonResponse::clear_ret() {
  ret_ = 0;
}
inline ::PaintingMessage::ErrorCode CommonResponse::ret() const {
  // @@protoc_insertion_point(field_get:PaintingMessage.CommonResponse.ret)
  return static_cast< ::PaintingMessage::ErrorCode >(ret_);
}
inline void CommonResponse::set_ret(::PaintingMessage::ErrorCode value) {
  
  ret_ = value;
  // @@protoc_insertion_point(field_set:PaintingMessage.CommonResponse.ret)
}

// string message = 2;
inline void CommonResponse::clear_message() {
  message_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CommonResponse::message() const {
  // @@protoc_insertion_point(field_get:PaintingMessage.CommonResponse.message)
  return message_.GetNoArena();
}
inline void CommonResponse::set_message(const std::string& value) {
  
  message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PaintingMessage.CommonResponse.message)
}
inline void CommonResponse::set_message(std::string&& value) {
  
  message_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:PaintingMessage.CommonResponse.message)
}
inline void CommonResponse::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PaintingMessage.CommonResponse.message)
}
inline void CommonResponse::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PaintingMessage.CommonResponse.message)
}
inline std::string* CommonResponse::mutable_message() {
  
  // @@protoc_insertion_point(field_mutable:PaintingMessage.CommonResponse.message)
  return message_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CommonResponse::release_message() {
  // @@protoc_insertion_point(field_release:PaintingMessage.CommonResponse.message)
  
  return message_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CommonResponse::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:PaintingMessage.CommonResponse.message)
}

// -------------------------------------------------------------------

// RegisterApp

// string id = 1;
inline void RegisterApp::clear_id() {
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RegisterApp::id() const {
  // @@protoc_insertion_point(field_get:PaintingMessage.RegisterApp.id)
  return id_.GetNoArena();
}
inline void RegisterApp::set_id(const std::string& value) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PaintingMessage.RegisterApp.id)
}
inline void RegisterApp::set_id(std::string&& value) {
  
  id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:PaintingMessage.RegisterApp.id)
}
inline void RegisterApp::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PaintingMessage.RegisterApp.id)
}
inline void RegisterApp::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PaintingMessage.RegisterApp.id)
}
inline std::string* RegisterApp::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:PaintingMessage.RegisterApp.id)
  return id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RegisterApp::release_id() {
  // @@protoc_insertion_point(field_release:PaintingMessage.RegisterApp.id)
  
  return id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RegisterApp::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:PaintingMessage.RegisterApp.id)
}

// string type = 2;
inline void RegisterApp::clear_type() {
  type_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RegisterApp::type() const {
  // @@protoc_insertion_point(field_get:PaintingMessage.RegisterApp.type)
  return type_.GetNoArena();
}
inline void RegisterApp::set_type(const std::string& value) {
  
  type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PaintingMessage.RegisterApp.type)
}
inline void RegisterApp::set_type(std::string&& value) {
  
  type_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:PaintingMessage.RegisterApp.type)
}
inline void RegisterApp::set_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PaintingMessage.RegisterApp.type)
}
inline void RegisterApp::set_type(const char* value, size_t size) {
  
  type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PaintingMessage.RegisterApp.type)
}
inline std::string* RegisterApp::mutable_type() {
  
  // @@protoc_insertion_point(field_mutable:PaintingMessage.RegisterApp.type)
  return type_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RegisterApp::release_type() {
  // @@protoc_insertion_point(field_release:PaintingMessage.RegisterApp.type)
  
  return type_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RegisterApp::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  type_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:PaintingMessage.RegisterApp.type)
}

// -------------------------------------------------------------------

// ModelInputData

// string name = 1;
inline void ModelInputData::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ModelInputData::name() const {
  // @@protoc_insertion_point(field_get:PaintingMessage.ModelInputData.name)
  return name_.GetNoArena();
}
inline void ModelInputData::set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PaintingMessage.ModelInputData.name)
}
inline void ModelInputData::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:PaintingMessage.ModelInputData.name)
}
inline void ModelInputData::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PaintingMessage.ModelInputData.name)
}
inline void ModelInputData::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PaintingMessage.ModelInputData.name)
}
inline std::string* ModelInputData::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:PaintingMessage.ModelInputData.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ModelInputData::release_name() {
  // @@protoc_insertion_point(field_release:PaintingMessage.ModelInputData.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ModelInputData::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:PaintingMessage.ModelInputData.name)
}

// bytes data = 2;
inline void ModelInputData::clear_data() {
  data_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ModelInputData::data() const {
  // @@protoc_insertion_point(field_get:PaintingMessage.ModelInputData.data)
  return data_.GetNoArena();
}
inline void ModelInputData::set_data(const std::string& value) {
  
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PaintingMessage.ModelInputData.data)
}
inline void ModelInputData::set_data(std::string&& value) {
  
  data_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:PaintingMessage.ModelInputData.data)
}
inline void ModelInputData::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PaintingMessage.ModelInputData.data)
}
inline void ModelInputData::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PaintingMessage.ModelInputData.data)
}
inline std::string* ModelInputData::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:PaintingMessage.ModelInputData.data)
  return data_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ModelInputData::release_data() {
  // @@protoc_insertion_point(field_release:PaintingMessage.ModelInputData.data)
  
  return data_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ModelInputData::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:PaintingMessage.ModelInputData.data)
}

// -------------------------------------------------------------------

// DataPackage

// .PaintingMessage.ModelInputData objectData = 1;
inline bool DataPackage::has_objectdata() const {
  return this != internal_default_instance() && objectdata_ != nullptr;
}
inline void DataPackage::clear_objectdata() {
  if (GetArenaNoVirtual() == nullptr && objectdata_ != nullptr) {
    delete objectdata_;
  }
  objectdata_ = nullptr;
}
inline const ::PaintingMessage::ModelInputData& DataPackage::objectdata() const {
  const ::PaintingMessage::ModelInputData* p = objectdata_;
  // @@protoc_insertion_point(field_get:PaintingMessage.DataPackage.objectData)
  return p != nullptr ? *p : *reinterpret_cast<const ::PaintingMessage::ModelInputData*>(
      &::PaintingMessage::_ModelInputData_default_instance_);
}
inline ::PaintingMessage::ModelInputData* DataPackage::release_objectdata() {
  // @@protoc_insertion_point(field_release:PaintingMessage.DataPackage.objectData)
  
  ::PaintingMessage::ModelInputData* temp = objectdata_;
  objectdata_ = nullptr;
  return temp;
}
inline ::PaintingMessage::ModelInputData* DataPackage::mutable_objectdata() {
  
  if (objectdata_ == nullptr) {
    auto* p = CreateMaybeMessage<::PaintingMessage::ModelInputData>(GetArenaNoVirtual());
    objectdata_ = p;
  }
  // @@protoc_insertion_point(field_mutable:PaintingMessage.DataPackage.objectData)
  return objectdata_;
}
inline void DataPackage::set_allocated_objectdata(::PaintingMessage::ModelInputData* objectdata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete objectdata_;
  }
  if (objectdata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      objectdata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, objectdata, submessage_arena);
    }
    
  } else {
    
  }
  objectdata_ = objectdata;
  // @@protoc_insertion_point(field_set_allocated:PaintingMessage.DataPackage.objectData)
}

// .PaintingMessage.ModelInputData layoutData = 2;
inline bool DataPackage::has_layoutdata() const {
  return this != internal_default_instance() && layoutdata_ != nullptr;
}
inline void DataPackage::clear_layoutdata() {
  if (GetArenaNoVirtual() == nullptr && layoutdata_ != nullptr) {
    delete layoutdata_;
  }
  layoutdata_ = nullptr;
}
inline const ::PaintingMessage::ModelInputData& DataPackage::layoutdata() const {
  const ::PaintingMessage::ModelInputData* p = layoutdata_;
  // @@protoc_insertion_point(field_get:PaintingMessage.DataPackage.layoutData)
  return p != nullptr ? *p : *reinterpret_cast<const ::PaintingMessage::ModelInputData*>(
      &::PaintingMessage::_ModelInputData_default_instance_);
}
inline ::PaintingMessage::ModelInputData* DataPackage::release_layoutdata() {
  // @@protoc_insertion_point(field_release:PaintingMessage.DataPackage.layoutData)
  
  ::PaintingMessage::ModelInputData* temp = layoutdata_;
  layoutdata_ = nullptr;
  return temp;
}
inline ::PaintingMessage::ModelInputData* DataPackage::mutable_layoutdata() {
  
  if (layoutdata_ == nullptr) {
    auto* p = CreateMaybeMessage<::PaintingMessage::ModelInputData>(GetArenaNoVirtual());
    layoutdata_ = p;
  }
  // @@protoc_insertion_point(field_mutable:PaintingMessage.DataPackage.layoutData)
  return layoutdata_;
}
inline void DataPackage::set_allocated_layoutdata(::PaintingMessage::ModelInputData* layoutdata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete layoutdata_;
  }
  if (layoutdata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      layoutdata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, layoutdata, submessage_arena);
    }
    
  } else {
    
  }
  layoutdata_ = layoutdata;
  // @@protoc_insertion_point(field_set_allocated:PaintingMessage.DataPackage.layoutData)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace PaintingMessage

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::PaintingMessage::ErrorCode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PaintingMessage::ErrorCode>() {
  return ::PaintingMessage::ErrorCode_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_painting_5fmessage_2eproto
